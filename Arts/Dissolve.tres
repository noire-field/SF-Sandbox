[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeVectorOp" id=4]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=5]
constant = Color( 0.982422, 0.0156665, 0.0156665, 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "dissolve"

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=8]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=9]

[sub_resource type="VisualShaderNodeScalarOp" id=10]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShader" id=12]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_7;
uniform float dissolve;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out2p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScalarUniform:15
	float n_out15p0 = dissolve;

// ScalarOp:16
	float n_in16p1 = 0.50000;
	float n_out16p0 = n_out15p0 - n_in16p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) - n_out16p0;

// ScalarFunc:9
	float n_out9p0 = round(n_out8p0);

// ScalarOp:10
	float n_in10p1 = 0.05000;
	float n_out10p0 = n_out8p0 - n_in10p1;

// ScalarOp:11
	float n_in11p0 = 1.00000;
	float n_out11p0 = n_in11p0 - n_out10p0;

// ScalarFunc:12
	float n_out12p0 = round(n_out11p0);

// Color:14
	vec3 n_out14p0 = vec3(0.982422, 0.015666, 0.015666);
	float n_out14p1 = 1.000000;

// VectorOp:13
	vec3 n_out13p0 = vec3(n_out12p0) * n_out14p0;

// Output:0
	ALPHA = n_out9p0;
	EMISSION = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -499.2, 10.4 )
nodes/fragment/0/position = Vector2( 1720, -60 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -280, -40 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( 40, -60 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( 400, 260 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( 880, 80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 640, 400 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 820, 400 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 1020, 400 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 1320, 400 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 1080, 580 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -20, 340 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -20, 420 )
nodes/fragment/connections = PoolIntArray( 2, 0, 7, 0, 7, 0, 8, 0, 8, 0, 9, 0, 9, 0, 0, 1, 8, 0, 10, 0, 10, 0, 11, 1, 11, 0, 12, 0, 12, 0, 13, 0, 14, 0, 13, 1, 13, 0, 0, 5, 15, 0, 16, 0, 16, 0, 8, 1 )

[resource]
shader = SubResource( 12 )
shader_param/dissolve = 0.0
